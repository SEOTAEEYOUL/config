example.property="I AM THE DEFAULT"

# logstash.host= 3.136.161.26:5000
# logging.config=classpath:logback-delayed.xml

spring.jpa.hibernate.ddl-auto=none
# spring.jpa.database=POSTGRESQL
# spring.datasource.platform=postgres
spring.jpa.database=mysql
spring.datasource.platform=mysql
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

spring.jpa.show-sql = true
# spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# spring.database.driverClassName= org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

server.port= 8081

spring.cloud.loadbalancer.ribbon.enabled = false
        
management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://eurekaserver:8070/eureka/
# eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka/

security.oauth2.resource.userInfoUri= http://authenticationservice:8082/user
# security.oauth2.resource.userInfoUri= http://localhost:8082/user
security.oauth2.client.grant-type = client_credentials
signing.key: "345345fsdfsf5345"



# Spring Cloud Stream - Kafka 설정
# 공통설정
# 함수 정의 "consumer", "producer"
spring.cloud.stream.kafka.binder.brokers=kafka:9092
# spring.cloud.stream.function.definition=consumer;producer

# spring.cloud.stream.bindings.inboundOrgChanges.content-type=application/json # 송수신할 메시지 타입을 제공(JSON)
spring.cloud.stream.bindings.inboundOrgChanges.group=licensingGroup         

# spring.cloud.stream.bindings.output.destination=orgChangeTopic    # 메시지를 작성할 메시지 큐(또는 토픽) 이름
spring.cloud.stream.bindings.output.destination=orgChangeTopic    # 메시지를 작성할 메시지 큐(또는 토픽) 이름
spring.cloud.stream.bindings.output.content-type=application/json # 송수신할 메시지 타입을 제공(JSON)
# Kafka와 zookeeper 의 네트워크 위치 제공
spring.cloud.stream.kafka.binder.zkNodes=kafka # zkNodes - zookeeper URL
spring.cloud.stream.kafka.binder.brokers=kafka # brokers - broker URL

# <빈 이름> + in / out + index -> 빈이름 orgChangeTopic
spring.cloud.stream.function.definition=orgChangeTopic; # teamUpdated;teamDeleted;
spring.cloud.stream.bindings.orgChangeTopic-out-0.destination=orgChangeTopic # 메시지를 작성할 메시지 큐(또는 토픽) 이름
spring.cloud.stream.bindings.orgChangesTopic-out-0.destination=orgChangeTopic
spring.cloud.stream.bindings.orgChangesTopic-out-0.content-type=application/json
spring.cloud.stream.bindings.orgChangesTopic-out-0.group=licenseGroup
# spring.cloud.stream.bindings.output-out-0.destination=orgChangeTopic    # 메시지를 작성할 메시지 큐(또는 토픽) 이름
spring.cloud.stream.bindings.output-out-0.content-type=application/json # 송수신할 메시지 타입을 제공(JSON)


spring.zipkin.baseUrl:http://zipkin:9411
# spring.zipkin.baseUrl:http://localhost:9411
spring.sleuth.sampler.percentage: 1

# redis.server = ostock-redis.ymengq.0001.use1.cache.amazonaws.com
# redis.port = 6379

keycloak.realm = spmia-realm                                       # 생성된 realm 이름
keycloak.auth-server-url = http://keycloak:8180/auth
# keycloak.auth-server-url = http://localhost:8180/auth              # 키클록 서버 URL 인증 엔드포인트 : http://<keycloak_server_url>/auth
keycloak.ssl-required = external
keycloak.resource = ostock                                         # 생성된 클라이언트 ID
keycloak.credentials.secret = 5988f899-a5bf-4f76-b15f-f1cd0d2c81ba # 생성된 클라이언트 시크릿
keycloak.use-resource-role-mappings = true
keycloak.bearer-only = true

organization.profile=I AM THE DEFAULT
organization.comment=Hello! updated by Spring Bus with webhook!