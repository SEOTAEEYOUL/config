example.property="I AM THE DEFAULT"

# logstash.host= 3.136.161.26:5000
# logging.config=classpath:logback-delayed.xml


# ------------------------------------------------------------------------
# Hibernate 설정
# ------------------------------------------------------------------------
# 로그레벨
# logging.level.org.hibernate=debug
logging.level.org.hibernate=info

logging.level.org.hibernate.type=trace

# SQL 로깅
logging.level.org.hibernate.SQL=debug

# 쿼리에 물음표로 출력되는 바인드 파라미터 출력
logging.level.org.hibernate.type.descriptor.sql=trace

# 통계 활성화
logging.level.org.hibernate.stat=debug
# logging.level.org.hibernate.generate_statistics=true
# ------------------------------------------------------------------------


# ------------------------------------------------------------------------
# JPA 설정
# ------------------------------------------------------------------------

# spring.jpa.hibrnate.ddl-auto = none
# spring.jpa.database = POSTGRESQL
# spring.datasoruce.platform = postgres
# spring.jpa.show-sql = true
# spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# srping.database.driverClassName = org.postgresql.Driver
# spring.datasource.testWhileIdle = true
# spring.datasoruce.validationQuery = SELECT 1


# 스키마 생성
# option type: create, create-drop, update, validate, none
# create 기존테이블 삭제 후 재 생성
# create-drop create와 같으나 종료시점에 테이블 drop
# update 변경된 부분만 반영 * 주로 이거 사용
# validate 엔티티와 테이블이 정상적으로 매핑되었는지 확인
# none 사용하지 않음
spring.jpa.hibernate.ddl-auto=none

# DDL 생성 시 데이터베이스의 고유기능을 사용하는가?
spring.jpa.generate-ddl=false

# 실행되는 SQL문을 보여줄 것인가?
# 로거용 로그와 hibernate가 System.out 으로 찍는 로그 두개씩 출력
# 로거를 사용할 경우 'false' 로 설정
spring.jpa.show_sql=true

# 실행되는 쿼리 콘솔 출력
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# 콘솔창에 출력되는 쿼리를 가독성이 좋게 포맷팅
spring.jpa.properties.hibernate.format_sql=true

# MySQL 상세지정
# 데이터베이스는 무엇을 사용하는가?
spring.jpa.database=mysql
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy

# spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# spring.datasource.driver-class-name=com.mysql.jdbc.Driver - 옛날 버전

# ## 추가 2022-12-28
# spring.datasource.url=jdbc:mysql://localhost:3306/ostock_dev?serverTimezone=UTC&characterEncoding=UTF-8
# spring.datasource.username=root
# spring.datasource.password=dlatl!00
# ## 


spring.datasource.testWhileIdle=true
spring.datasoruce.validationQuery=SELECT 1

# 
spring.jpa.defer-datasource-initialization=true

#기본 batch size 설정
# 100(default) -> 1000 : 성능 향상을 위해 조정
spring.jpa.properties.hibernate.default_batch_fetch_size=1000
# ------------------------------------------------------------------------


management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true
# ------------------------------------------------------------------------

eureka.instance.preferIpAddress=true
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.serviceUrl.defaultZone = http://eurekaserver:8070/eureka/
# eureka.client.serviceUrl.defaultZone=http://localhost:8070/eureka/

security.oauth2.resource.userInfoUri= http://authenticationservice:8082/user
# security.oauth2.resource.userInfoUri=http://localhost:8082/user
security.oauth2.client.grant-type=client_credentials
signing.key: "345345fsdfsf5345"


spring.cloud.stream.bindings.inboundOrgChanges.destination=orgChangeTopic
spring.cloud.stream.bindings.inboundOrgChanges.content-type=application/json
spring.cloud.stream.bindings.inboundOrgChanges.group=licensingGroup
# spring.cloud.stream.kafka.binder.brokers=localhost:9092
# spring.cloud.stream.function.definition=basicConsumer; basicProducr
# spring.cloud.stream.kafka.binder.zkNodes=kafka
# spring.cloud.stream.kafka.binder.brokers=kafka
# spring.cloud.stream.kafka.binder.brokers=localhost:9091,localhost:9092,localhost:9093 # brokers - broker URL
# spring.cloud.stream.kafka.binder.zkNodes=localhost:2181,localhost:2182,localhost:2183 # zkNodes - zookeeper URL
# spring.cloud.stream.kafka.binder.zkNodes=kafka:2181 # zkNodes - zookeeper URL
# spring.cloud.stream.kafka.binder.brokers=kafka:9092 # brokers - broker URL

# zkNodes - zookeeper URL
spring.cloud.stream.kafka.binder.zkNodes=kafka
# brokers - broker URL
spring.cloud.stream.kafka.binder.brokers=kafka

# <빈 이름> + in / out + index -> 빈이름 orgChangeTopic
spring.cloud.stream.function.definition=orgChangeTopic;
# 메시지를 작성할 메시지 큐(또는 토픽) 
spring.cloud.stream.bindings.orgChangeTopic-in-0.destination=orgChangeTopic이름
# spring.cloud.stream.bindings.output-out-0.destination=orgChangeTopic    # 메시지를 작성할 메시지 큐(또는 토픽) 이름
# 송수신할 메시지 타입을 제공(JSON)
spring.cloud.stream.bindings.output-out-0.content-type=application/json


spring.zipkin.baseUrl:http://zipkin:9411
# spring.zipkin.baseUrl:http://localhost:9411
spring.sleuth.sampler.percentage: 1

# redis.server = ostock-redis.ymengq.0001.use1.cache.amazonaws.com
redis.server = redis
redis.port = 6379

# keycloak 구성정보
keycloak.realm = spmia-realm
keycloak.auth-server-url = http://keycloak:8180/auth
# keycloak.auth-server-url = http://localhost:8180/auth
keycloak.ssl-required = external
keycloak.resource = ostock
keycloak.credentials.secret = 5988f899-a5bf-4f76-b15f-f1cd0d2c81ba
keycloak.use-resource-role-mappings = true
keycloak.bearer-only = true





redis.server = redis
redis.port = 6379